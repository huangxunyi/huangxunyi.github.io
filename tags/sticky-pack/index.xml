<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>sticky-pack on Huangxunyi&#39;s Blog</title>
    <link>https://huangxunyi.github.io/tags/sticky-pack/</link>
    <description>Recent content in sticky-pack on Huangxunyi&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>© This post is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License，please give source if you wish to quote or reproduce.</copyright>
    <lastBuildDate>Sun, 18 Aug 2019 19:10:00 +0800</lastBuildDate>
    
	<atom:link href="https://huangxunyi.github.io/tags/sticky-pack/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Netty 粘包解决</title>
      <link>https://huangxunyi.github.io/post/netty-sticky-pack/</link>
      <pubDate>Sun, 18 Aug 2019 19:10:00 +0800</pubDate>
      
      <guid>https://huangxunyi.github.io/post/netty-sticky-pack/</guid>
      <description>什么是粘包? TCP是基于字节流的，虽然应用层和TCP传输层之间的数据交互是大小不等的数据块，但是TCP把这些数据块仅仅看成一连串无结构的字节流，没有边界；另外从TCP的帧结构也可以看出，在TCP的首部没有表示数据长度的字段，基于上面两点，在使用TCP传输数据时，才有粘包或者拆包现象发生的可能
通过一个例子来了解粘包 ServerHandler.java
public class ServerHandler extends ChannelInboundHandlerAdapter { @Override public void channelRead(ChannelHandlerContext ctx, Object msg) { ByteBuf byteBuf = (ByteBuf) msg; System.out.println( &amp;#34;Server Read -&amp;gt;&amp;#34; + byteBuf.toString(StandardCharsets.UTF_8)); } } ClientHandler.java
public class ClientHandler extends ChannelInboundHandlerAdapter { @Override public void channelActive(ChannelHandlerContext ctx) { for (int i = 0; i &amp;lt; 1000; i++) { ByteBuf buffer = getByteBuf(ctx); ctx.channel().writeAndFlush(buffer); } } private ByteBuf getByteBuf(ChannelHandlerContext ctx) { byte[] bytes = &amp;#34;粘包Rua~&amp;#34;.</description>
    </item>
    
  </channel>
</rss>